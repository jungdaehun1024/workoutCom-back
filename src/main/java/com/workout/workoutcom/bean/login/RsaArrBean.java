package com.workout.workoutcom.bean.login;

import com.workout.workoutcom.bean.login.IF.RSABeanIF;
import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.stereotype.Service;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.ArrayList;
import java.util.Random;

@Service
public class RsaArrBean implements RSABeanIF {

    ArrayList<String> privateKeyArr = new ArrayList<String>();
    ArrayList<String> publicKeyArr = new ArrayList<>();

    private PrivateKey privateKey;
    private int rnum;


    RsaArrBean(){
        long seed = System.currentTimeMillis(); // 시드 생성
        Random rand = new Random(seed); // 난수 생성기 초기화
        rnum =rand.nextInt(4); // 0~3까지의 정수를 랜덤하게 생성

        //개인키 (Base64 인코딩)
        privateKeyArr.add("MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCV60BfUsYvHDhRgjLy7HaXxOZidE6kzvrale1GWbMLXsN7PbB06PQm9yGFrM/diuvaZHDdQf7ibgtRf+2J5VEp45WDwby/OjDkTiEgEBi2+iPkM21c8MX95/KMVTXOzFqrtfVlPTpxzlZgcCtx0ywoFzHBlCmvkgs03jKbkCAZxOm6xLK+jzNQ74Y+rHp/jsDPa/HYShs8rsYXu/TdFz9rd9DKIkwE0Y08fGFV0/qg2WXJ8TmNFYS7j6Br6Ypu3mQUNYgdrgOEovWZf91puOxhmPKIdbB8vstIcWHN415JL0DHJYksH38BpOnndpyEZbOEdDB7atQLT0xg2bITYZWFAgMBAAECggEAAXoesOPd7tOFmahhevS40Ya9i3gTpc/dogEvG43QQKfgEt42+YcYfrSETwQhRFkodK1sa9fEwur5M86bM+Wub7Z/2YXzXv2K5UW8YrZu8+bzxKxRGm92HC4s2rJTnt7qhKPwAyYmXUaTw+pe/70Bw658STFgDbK4b9g5LrglLVoz6vtwZhZNS9xzpU7GKbdVdRRTgqWmm76ekpKKtuAU9Xs8JNVlv0mJXWr8NtsSqSf8yuIAayMaR2tNewmry7h2+ItmXSYL8+vCBKX3Bp0N29kEBvamRhW9YOQ1BCFFmc7fMZzbSi1O3dXSpj6hVYb+LEAA+eXwkLK+zdmFqo6r2QKBgQC4iuOUkkaUcurvIHShRk2DUFmTeiUwAA5jIQqWEm4OXOKLzoH5bzrpA9dBr/1TY2BpmxY3iMrM7ZBEis+PWDAA/8aS3x6YRHt59CJ5ojPAq9yl88xKpsnaAStAloy4vxo80oHVZJp5g/JBfUSnKTWFK9rGqwIZSSgHslB19wTEWQKBgQDP+DzD1Ni1Kf2fbVj5CCHh82D7Nli0GgJsJufWqruMWrCQSxxNec7rvNuIw76lgrEj6KeSHyAH1qyo+MwLz2Pb49R/5My9kN+GvrMtpF+nrMxmR+LaSbJqIfpCrXKgOKZFfj53iMViw/A5VZEF0gCYzAYLe/qrDlbbq20w2IDlDQKBgHA5FfiNk5pG4BOXGxXQGOcX/8EtcFvmTNl/iF6GyqK1XZdDd8rmF18IVOi/S0BgmIrgIvyWlS1V8nucJmi3aknRQUKjqIlUa/pXundZajtqx/2rarqi/vEx8MmQQ/c9T4lZQlcwnLf0w2eL9CnrZ36akqpp6BbUZCF6EHAMTbvRAoGAesw/zP4b63Tc3csqMvl7UDht9kdTvxxwe73JPPbZAPn3sWu4TYL0DDwagLncE0yFHgfdEimwtxAqKSenC/4sH4V6Tv4hanllkuF9WSDqnk4o7ufZaj0DzSk85SwXN8XbX8M4TUqEClpZuPDuTbp/QbmOhC9zhpdT8CdbtPDRwu0CgYALoQPWdvIXoQL4W0b7UYlaOky+tbErHvqM544GHiQjRjk0lQju5JQSSezcjsv009W9rMXTVwxpdlo07gaejrHb6b//MDL2VU6Qms25p9R06epN8P9hurofv95f4hvpUdEXuTYDN+uh3Wkhtw+ATaZfRYH4a/bDg6i12Aq65KhgkA==\n");
        privateKeyArr.add("MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC78toJXb9HZpHzMhw5wxBu3Q1MQqReDuEDbywBS1vAyIC98QUSl5MchRyg1HCWuWu1IcxxzFvB0Cp2oxZKIvnaXZpRf5VKuHyqKEGE3JctS7RpwDGyEQgXcL1iz5BIdRITMq0jo7D9COvkRkpv/ABknjCh/R85PLclvUUpzdnEeYKMEWNLNiMYfWEcoDiFG68LqomYA+o9QNkGW4OnQtXjVuX+DUDv1WXdSxzqmQDMvygjM+gOS3Ta49u/WlI+AdNJL9bdzH49p9O83FevP1Hc0LThPuEZ08y7j5r63cBjZOaJ/TABOGYJP2u2mxNTKlwNf/1nyK3tE9nxSsIof5FzAgMBAAECggEABRSR7zng/0GXBV9f4vHSYmTIRLzya3Z0f57ELj7GuqXQ0RGQRQni2J0CgphreK+HaUyCFbtj6Y/CbhWHdzaN0WjBUJ2lv/DPsdvHtZsu3PMUa91dmoYaVWPfQqoAqOy9MdanVnTIxnY0xiVeQrupmQ6rmt1YODhbbQI6OeCOF+DzGJEq74XZsHZKfadeGZZrC7B43XB0Z/L4j+u8TrIW01U+zYP5qODdOfHz/QexuPjubqbOkxZF4Zz0CTUItubRGFnI0XrEn/CmPDJZIL+Ztrnlei/ZjcQqZuoQOe1Z69LfmB7ZRFsRWvj8gOu7tZNVb1LPp0uyCmrQX/uVpvm1mQKBgQDUZU5gHwcCOd/djGISAT5NMtOMRR2FCKs26iEEv3LBdpcbeZudnqyvz3QmosxSNgOf7Av8147L3764G+6U+7LEdC9wdf0AQhWgA84FMdrinedXslG3h1ayTb1/Dilh91J2NqJPtGaZSvsWFBPF92u41PL7YxomCEVkLhyKKtzfWwKBgQDiiLOfJNhRvb32mgSGw/PVlZFT5fcbzt31giMyUzLr+SF13m8C7ob9LkGeyCupN8RcarYoEWcv01s8nY7d2vq8lNs8iBiZaNqBDuIOH1r5frJrsc4z0NAsHrTTTz/X25dmbXKFFaP1okE7IXJUUo/jEl1So7y3a99TU3rcps4JyQKBgQCN8V4dkt7GOBNKJoVr7vTJ9su2FIKT46U4v+NtHtz8Odrme7Dp958Ep6nCIE5YKszlVYT1ZsGBsnfs5o3ddxCTheomSFPalk+JbsGCaz0S8eAnlX5THtlrs9SOUtKJLBYp9n0mszNWAuwmZyiHxsBw96+jHSnefOyS9NYR6G9PvQKBgQC28IiGI54h3OYUyOqQ3pwCRwgWxebZ6SRsSI0d7fx4fjdcVaY2quQOgBV0IdjIjgWgUHkMQImhIMFUYTTnyxijxF6MMqgS849Jm/hISWARjhSOTgfk5mPGzYFgCGbZbjeE+yv5d7FyA3dERk1q9UXHraP5wcr8ITw3sXnNyVMoqQKBgQDON87Vw34eRpvpo5Mju/kSY2UPXQUyHuW3XMrZQjLNal4W3ZYg6I1a1bhHCwTRooSswXl0gdJX/pTvR0VDA5zQfQswFqZfrFMoKIOO6TS+LrpvkslepoFJnBdmyQcki+AtF3KaK5zjhR259xaWYrz1B7KvA+K29ULN0Gn6lNXSsQ==\n");
        privateKeyArr.add("MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC1DOpk74Bzt1oFd4+HLhZ83ZvjJ2Z+ovc1dkxm2waQ2dzIANhCDCqI0i0yTZTsrPzsmbeSTqwZb8eyhjq3RQHxXaoeA8F8QlvFAYWtnPesU5bHTXtLQ3ZqFFkDghjpTtITfGJXEgFikdMtzFgaDnGACgG21PJ5Gp+pxPDHiMkQomnGhwzBCRAG/9EE54GZjShkQFNd6Uq0ORbV9wCf1lFcLmYQmvxPsBZzCtOSw1egaLrepKfmhY7CvaTMwkZd8QFWKbP85DMGmIeoQrD3V7Nj2qNPdFhO6H8w7rAx5dJnimTUb2PSMzxeR5G1tqpPu8f9V08qvYzL+4sWgP49KpqXAgMBAAECggEAB3NdngPBLIHqIXl3HaAG6uKPzLxNWn7IX5nbsQvobEOa81wdijJH+dN0arKIo2jHC9GTnWDBclaISE9/0RT07ILnQk7zQnLUpfnXD3r7MktKVC9bGJDRKbJmq19KOSe2O3kN7vldtzm7EBJtubzIbPV8dpKy28r9sRXatstpQtbqcDU80aY5j5nXpq0Lcjgdc7ceQKbQ4z7SRQ72a3ZLzoIDHACHbxPLgfKR7RZ9ceAY86qjgwR6Oc/uym+ubNJT2rcYWsM8WC0f5pmmbOkbu17UaScWIhqfaPwUDBymzFzY6eYnLy89bwh2PUKnQZoGOsqzWj7JmWpyc5YWIfvP0QKBgQDoQErtHkg/GwZkD3pQeffrgQY40I1pCL9EWO0bpf716qpz8dXg7dTkXIEzRVhLOQE/BTJa3MysRU4827bwaSWWQkS5vbXJdHTlVD82aEGk5PGlhPTz5eybT6stuf6WndQE/HSU5mnqc6CwyT0sPEyWJggaCzu6Mel+GEjej4SBmQKBgQDHkFPBlJsc3+GToxCJwP007i8AR/c2/1FupMnHIXMw18MCWaej6jwmDr8sV6FK06gkEg7Ou1Gu67etk/pDZickW6iyT4vmETFj5ZGquaeadSzJBFoPuR6tVonv/QKUQJYTRF9SKes+JbPDDNpDGzDxaFqt3edm8WSMkA+GR837rwKBgHJ1TPey1tQS04F4h0Ul9uKfQZu6XBaJcwmR8biQhChZsAtYAZnKXAL2+81yvWLFAzI1s21IJ642saoYdf3hM97rZcdMEUzpEbr7W/PKSZ+kHNr/vWB9za91Ad2VLjy4J4cVi7beHxCmT2kQpA8q4GuW7qM3KgZHFtVHzpGwlRLxAoGAOy/N93LIkkbAE1ZgeEqZjlI59F5jrpcIosUS5xE/pbPILXFDq/SzhCIJhvAycQvXKWOFqsCZmERmxH9H0SeB4mGg5cl7128v883JZxYK5F9uOewlfdZMh+JLpLaoRinlmK9FigvOri7mYqn0LcTpvh9SDZDrqXdcd+feAthW+hcCgYEAjk7Eeybh0Bz0qjF3ZTJ6Mk6pxf+6OAHk3cYKoc5hweKoR21xgEm2FmRgpLylnpt31Eyh7sjiLxonNv6XToSK9SRyF6HBwKk21qVj5gIsU8U3YT8MLPH4HIW9bSJuJJ0yC6/4ZSxbDx0whBKd5sWFNByx5P1dHVs+H9Fx/AIyH7I=\n");
        privateKeyArr.add("MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC2T09kRscvzpDxi02Lr6KpU+4Gf/Gzsb/F5NMQrNXSIP36B3fNldhL8D9lOaFbe/8maJLs7nhmHvnXc89n7I6YD94vG/dQUVW+wr+lTACwTC5rNoi53Qq9U7urklQ//4xGY02wtF0ZQvlMIHVZaI1z/+yYgIATqMX/NnOX5yfRp8TtFx5lDHrf55838fGKwlt0+JOx1v9NxdM5hlvoN1DJsTPu1aSMmzf6vmsMf2GWYx+Y/4rpa2lpvu26v/eADxwtdx0GTWb3LzfC2ixrgcFJMHSYztx5tA8N/Aa908mPVnOqKO0JI+IrfkWIM9QlthkBpmXYaq/QHCkQg6cT4rT9AgMBAAECggEABFgAasG69jskPfUVPGpLZGBxD+uVfTQTfyoUE1Yi5BZQJthttNLIrAqF4CoO26ipLCeatJV7/eboCgei3fWHcj0SjKnMazf85IYsXcphS9IM2xYaDN+k5Vzs4Eokwr+afoTYMYkinLr5SKSPVzmEAUsMPpf1NUK0sP+BopFp4/dijExn9jrpd9i/HdLSozUMc5ZolRbCbzxoHxPiMnaJETyYIGojDmzqUZdMFwX7E8bNBoKAX3Lb9R/ytcfyVXrwctdrp/CAltpv4cn4TyKlLU4jlBtYdVwN249I0SRdi9xomBgsz5f0umJs//iDEJ7vwBe+L00/06os1mEQGQM+GwKBgQDlEntCPWpfiOUHOotuMm6FvZYbqcT1UdbghN3uBUxC44LLuS1aFfnjlR67RvjPq1uwJnJpJA4ss2yx6sc49E/Kh+dt1KtbwGJb1IK+wBHJimYRoZNaDLCULfaj0sQ1twfSsk2cNIAur36or3I4a2VABBC5YGRbw9zdUOBc9WS2vwKBgQDLvZkcug6GG4t+ZyelhcqrO3cZG5sX1pR5Tpn1AI3YvINFXq6wgkZh1uQFoExvXZCGmEEUqd2KGMke66cUtgAWvpWWNxlkGIxO5r4Kti7pknlAvjErlVeMUQmrT9tpgpJDb+b4qos4eEjVQr6mxbWx4ojsJ3TjWYwFkj3PuMpfQwKBgQCnlEWnx9Yx3avvBd1K2IoSPQe7ZQ85iI1x4sGYhzerF1VwRB/xb3JIE6dPyjPreKiyzO2WDVJxUTGLVv43pENbHuEncBWMIcnS9DxR36Ejl6Pj8hgiIHZtcNKmNmJkCWonsVkllSLRBIHcVb1xmN+RXWf+tY21tCu3nJsGZl8vcQKBgFYNHj4j1z6NI72fk/81IwRveT4Bit/moY8aw6vXMBH6jPcfpmimnVN1j5lQuvfObNxsMhCoLgnFriyBG3CD7kWs+UEYxICiXaB1lI6xo97DHrNZoSrnSLLbB1pzwBgwLdaNzN/6KBMRurFYH24Q00zugSY9BAGCMMGporG5OsBBAoGBALpqOdOKkTuJkb2xLCpVcj16/WYNpkOKsYIbVtU8+2rLanyommgXB5vHeLGBbOg1mFL7YzYBKS++6Al8h/NQBTrs635+L9c/o2e752REy80753LTLRJtvJXtHMjCUQxoef3TbQDX5joRZy8lRBO4Xu4o299einoaki4fGcygFUH8\n");

        //공개키 모듈러스(16진수)
        publicKeyArr.add("95eb405f52c62f1c38518232f2ec7697c4e662744ea4cefada95ed4659b30b5ec37b3db074e8f426f72185accfdd8aebda6470dd41fee26e0b517fed89e55129e39583c1bcbf3a30e44e21201018b6fa23e4336d5cf0c5fde7f28c5535cecc5aabb5f5653d3a71ce5660702b71d32c281731c19429af920b34de329b902019c4e9bac4b2be8f3350ef863eac7a7f8ec0cf6bf1d84a1b3caec617bbf4dd173f6b77d0ca224c04d18d3c7c6155d3faa0d965c9f1398d1584bb8fa06be98a6ede641435881dae0384a2f5997fdd69b8ec6198f28875b07cbecb487161cde35e492f40c725892c1f7f01a4e9e7769c8465b38474307b6ad40b4f4c60d9b213619585\n");
        publicKeyArr.add("bbf2da095dbf476691f3321c39c3106edd0d4c42a45e0ee1036f2c014b5bc0c880bdf1051297931c851ca0d47096b96bb521cc71cc5bc1d02a76a3164a22f9da5d9a517f954ab87caa284184dc972d4bb469c031b211081770bd62cf904875121332ad23a3b0fd08ebe4464a6ffc00649e30a1fd1f393cb725bd4529cdd9c479828c11634b3623187d611ca038851baf0baa899803ea3d40d9065b83a742d5e356e5fe0d40efd565dd4b1cea9900ccbf282333e80e4b74dae3dbbf5a523e01d3492fd6ddcc7e3da7d3bcdc57af3f51dcd0b4e13ee119d3ccbb8f9afaddc06364e689fd30013866093f6bb69b13532a5c0d7ffd67c8aded13d9f14ac2287f9173\n");
        publicKeyArr.add("b50cea64ef8073b75a05778f872e167cdd9be327667ea2f735764c66db0690d9dcc800d8420c2a88d22d324d94ecacfcec99b7924eac196fc7b2863ab74501f15daa1e03c17c425bc50185ad9cf7ac5396c74d7b4b43766a1459038218e94ed2137c625712016291d32dcc581a0e71800a01b6d4f2791a9fa9c4f0c788c910a269c6870cc1091006ffd104e781998d286440535de94ab43916d5f7009fd6515c2e66109afc4fb016730ad392c357a068badea4a7e6858ec2bda4ccc2465df1015629b3fce433069887a842b0f757b363daa34f74584ee87f30eeb031e5d2678a64d46f63d2333c5e4791b5b6aa4fbbc7fd574f2abd8ccbfb8b1680fe3d2a9a97\n");
        publicKeyArr.add("b64f4f6446c72fce90f18b4d8bafa2a953ee067ff1b3b1bfc5e4d310acd5d220fdfa0777cd95d84bf03f6539a15b7bff266892ecee78661ef9d773cf67ec8e980fde2f1bf7505155bec2bfa54c00b04c2e6b3688b9dd0abd53bbab92543fff8c46634db0b45d1942f94c207559688d73ffec98808013a8c5ff367397e727d1a7c4ed171e650c7adfe79f37f1f18ac25b74f893b1d6ff4dc5d339865be83750c9b133eed5a48c9b37fabe6b0c7f6196631f98ff8ae96b6969beedbabff7800f1c2d771d064d66f72f37c2da2c6b81c149307498cedc79b40f0dfc06bdd3c98f5673aa28ed0923e22b7e458833d425b61901a665d86aafd01c291083a713e2b4fd\n");
    }

    //공개키 모듈러스
    @Override
    public String getPublicKeyModules() {

        return publicKeyArr.get(rnum);
    }

    //공개키의 공개 지수
    @Override
    public String getPublicKeyExponent() throws Exception {
        return "10001";
    }

    //Base64인코딩된 개인키를 디코딩
    @Override
    public PrivateKey getPrivateKey() throws Exception {

            String privateStr = privateKeyArr.get(rnum);
            byte[]bPrivateKey = Base64.decodeBase64(privateStr); // Base64로 인코딩 된 문자열을 바이트 배열로

            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(bPrivateKey);
            privateKey = keyFactory.generatePrivate(keySpec);

        return privateKey;
    }
}
