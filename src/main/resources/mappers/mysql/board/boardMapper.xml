<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.workout.workoutcom.dao.board.BoardMapper">

    <!--게시글 생성-->

    <!-- 첨부파일을 제외한 게시글 내용 저장 -->
    <insert id="insertBoard" parameterType="com.workout.workoutcom.dto.board.BoardDto" useGeneratedKeys="true" keyProperty="boardId">
    INSERT INTO board (title,content,createdAt,updatedAt,writerAccount,categoryId)
    VALUES (#{title},#{content},now(),now(),#{writerAccount},#{categoryId})
    </insert>

    <!--게시글 첨부파일-->
    <insert id="insertBoardAttach" parameterType="java.util.List">
        INSERT INTO attachment(boardId,attachmentName,attachmentPath,attachmentMIME)
        VALUES
        <foreach collection="list" item="item"  separator=",">
            (#{item.boardId},#{item.attachmentName},#{item.attachmentPath},#{item.attachmentMIME})
        </foreach>

    </insert>

    <!-- 게시글 생성 시 선택가능한 카테고리 목록 -->
    <select id="selectCreatableCategories" resultType="com.workout.workoutcom.dto.category.BoardCategoryDto">
        WITH cte_tree AS(
            SELECT c1.categoryId , c1.categoryName
            FROM category c1
            WHERE c1.parentCategoryId IS NULL
            AND
            NOT EXISTS(
                SELECT *
                FROM category c2
                WHERE c1.categoryId = c2.parentCategoryId
            )
        )

        SELECT ct.categoryId,ct.categoryName
        FROM cte_tree ct

        UNION ALL

        SELECT c.categoryId,c.categoryName
        FROM category c
        WHERE c.parentCategoryId
        IS NOT NULL
    </select>
    <!-- 게시글 생성 END -->

    <!--첨부파일 삭제 -->
    <delete id ="deleteBoardAttach" parameterType="java.util.List">
        DELETE FROM attachment WHERE attachmentId IN
        <foreach collection="list" item="item" open="(" separator=","  close=")">
          #{item.attachmentId}
        </foreach>
    </delete>



    <!--게시글 목록-->

    <!-- 0 뎁스 카테고리 중 자식 카테고리를 가지는지 판별 -->
    <select id="hasChildCategory" parameterType="int" resultType="boolean">
        SELECT EXISTS(
            SELECT *
            FROM category
            WHERE parentCategoryId = #{categoryId}
        )AS has_child
    </select>

    <!-- 0 뎁스 카테고리 중 자식 카테고리를 가지지 않는 경우(공지사항 & 자유게시판..)-->
    <select id="selectBoardsHasNoChildCategory" parameterType="int" resultType="com.workout.workoutcom.dto.board.BoardDto">
        SELECT b.boardId,b.title,b.content,b.createdAt,b.updatedAt,b.writerAccount,b.categoryId,c.categoryName,COUNT(*) OVER() as totalCount
        FROM board b
        INNER JOIN category c ON b.categoryId = c.categoryId
        WHERE b.categoryId = #{categoryId}
        ORDER BY boardId DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- 0뎁스 카테고리 중 자식 카테고리를 가지는 경우(자식 카테고리의 게시글 목록을 모두 불러옴) -->
    <select id="selectBoardsHasChildCategory" parameterType="int" resultType="com.workout.workoutcom.dto.board.BoardDto" >
       WITH RECURSIVE cte_tree AS(
           SELECT categoryId
           FROM category
           WHERE categoryId = #{categoryId}

           UNION ALL

           SELECT c.categoryId
           FROM category c
           INNER JOIN cte_tree ct ON ct.categoryId = c.parentCategoryId
       )
       SELECT b.boardId,b.title,b.content,b.createdAt,b.updatedAt,b.writerAccount,b.categoryId,COUNT(*) OVER() as totalCount,(SELECT categoryName FROM category WHERE categoryId = #{categoryId}) as categoryName
       FROM board b
       WHERE b.categoryId IN (SELECT categoryId FROM cte_tree)
       ORDER BY boardId DESC
       LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- 1뎁스 카테고리 게시글 목록 -->
    <select id="selectChildCategoryBoards" parameterType="int" resultType="com.workout.workoutcom.dto.board.BoardDto">
        SELECT b.boardId,b.title,b.content,b.createdAt,b.updatedAt,b.writerAccount,c.categoryName as categoryName,COUNT(*) OVER() as totalCount
        FROM board b
        INNER JOIN category c  ON c.categoryId = b.categoryId
        WHERE b.categoryId = #{categoryId}
        ORDER BY boardId DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>


    <!-- 게시글 상세-->

    <resultMap id="boardWithAttachResultMap" type="com.workout.workoutcom.dto.board.BoardDto">
        <!-- 게시글 필드 매핑-->
        <id property="boardId" column="boardId"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="createdAt"/>
        <result property="writerAccount" column="writerAccount"/>
        <result property="categoryName" column="categoryName"/>
        <result property="categoryId" column="categoryId"/>
        <collection property="attachments" ofType="com.workout.workoutcom.dto.board.Attachment">
            <result property="attachmentId" column="attachmentId"/>
            <result property="attachmentName" column="attachmentName"/>
            <result property="attachmentPath" column="attachmentPath"/>
            <result property="attachmentMIME" column="attachmentMIME"/>
        </collection>
    </resultMap>

    <select id="getBoardDetail" resultMap="boardWithAttachResultMap" parameterType="int">
        SELECT b.boardId,b.title,b.content,b.createdAt,b.writerAccount,b.categoryId, a.attachmentId,a.attachmentMIME,a.attachmentName,a.attachmentPath,
               (SELECT categoryName FROM category c WHERE b.categoryId = c.categoryId) as categoryName
        FROM board b
        LEFT JOIN attachment a ON b.boardId = a.boardId
        WHERE b.boardId = #{boardId}
    </select>

    <!-- 게시글 상세 END -->



    <!-- 게시글 수정 -->
    <update id="updateBoard" parameterType="com.workout.workoutcom.dto.board.BoardDto">
        UPDATE board
        SET title = #{title},content = #{content}, updatedAt = now() , categoryId = #{categoryId}
        WHERE boardId = #{boardId}
    </update>

    <!-- 게시글 삭제-->
    <delete id="deleteBoard" parameterType="int">
        DELETE FROM board
        WHERE boardId =#{boardId}
    </delete>

    <!-- 게시글 총 개수 -->
    <select id = "selectBoardCount" parameterType="int" resultType="int">
        SELECT count(*) FROM board;
    </select>

    <!-- 게시글 전체 카테고리 조회 -->
    <select id="selectBoardCategory" resultType="com.workout.workoutcom.dto.category.BoardCategoryDto">
        WITH RECURSIVE categoryTree AS(
            SELECT categoryId,categoryName,parentCategoryId, 0 AS depth
            FROM category
            WHERE parentCategoryId IS NULL
            UNION ALL

            SELECT c.categoryId,c.categoryName,c.parentCategoryId, ct.depth+1
            FROM category c
            INNER JOIN categoryTree ct ON ct.categoryId = c.parentCategoryId
        )
        SELECT  categoryId,categoryName,parentCategoryId, depth FROM categoryTree;
    </select>
</mapper>